---
# Check to see if the named.conf file already exists
- name: Check if the named.conf file exists
  stat: 
    path: /etc/named.conf
  register: named_config

# Check to see if firewalld is installed
- name: Grab list of all installed packages
  package_facts:
    manager: auto

# Epel Repo Install
- name: Add Epel Yum Repo
  yum:
    name:
      - epel-release
    state: present

# Bind Install
- name: Adding required packages
  yum:
    name:
      - bind
      - bind-utils
      - net-tools
      - iproute
      - bind-dyndb-ldap
    state: present

# Set Variables used in various Bind config tasks
- name: Gather network CIDR
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f2
  register: subnet_cidr
  changed_when: False

- name: Calculate PTR Zone
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f1 | awk -F"." '{print $3"."$2"."$1}'
  register: ptr_zone
  changed_when: False

- name: Calculate PTR nameserver Id
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f1 | awk -F"." '{print $4}'
  register: ptr_id
  changed_when: False

# Back Named.conf
- name: Backup named.conf
  copy:
    remote_src: True
    src: /etc/named.conf
    dest: /etc/named.conf.backup
    when: named_config.stat.exists

# Configure Bind
- name: Configure named.conf
  template: src=named.conf.j2 dest=/etc/named.conf owner=named group=named mode=0775
  notify: Restart Bind Service

- name: Configure named.conf.local
  template: src=named.conf.local.j2 dest=/etc/named/named.conf.local owner=named group=named mode=0775
  notify: Restart Bind Service

- name: Create zones directory to store zone data
  file: path=/etc/named/zones state=directory owner=named group=named mode=0775 recurse=yes

- name: Configure {{ domain }} zone
  template: src=db.zone.j2 dest=/etc/named/zones/db.{{ domain }} owner=named group=named mode=0644
  notify: Restart Bind Service

- name: Configure {{ domain }} PTR zone
  template: src=db.ptrzone.j2 dest=/etc/named/zones/db.{{ ptr_zone.stdout }} owner=named group=named mode=0644
  notify: Restart Bind Service

- name: Start Bind Service
  service: name=named state=started enabled=yes

# Restart Bind Service
- name: Restart Bind Service
  meta: flush_handlers # Force restart handlers to restart now instead of at end of playbook run.

# Configure local resolution to use Bind
- name: Reconfigure /etc/resolv.conf to use local Bind service
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DNS1='
    line: 'DNS1={{ ansible_default_ipv4.address }}'
  notify: Restart Networking Service

- name: Reconfigure /etc/resolv.conf to use local search domain
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DOMAIN='
    line: 'DOMAIN={{ domain }}'
  notify: Restart Networking Service
  
# Restart Networking Service  
- name: Restart Networking Service
  meta: flush_handlers # Force restart handlers to restart now instead of at end of playbook run.

# Set SELinux Contexts
- name: Reconfigure /etc/sysconfig/named SELinux
  lineinfile: dest=/etc/sysconfig/named state=present regexp='^ENABLE_ZONE_WRITE=' line='ENABLE_ZONE_WRITE=yes'

- name: Set SELinux contexts
  seboolean: name=named_write_master_zones state=yes persistent=yes
  failed_when: no
  changed_when: no

# Configure Firewalld
- name: Stop firewalld service if present
  systemd:
    name: firewalld
    state: stopped
  when: '"firewalld" in ansible_facts.packages'
  failed_when: no
  changed_when: no

- name: Add DNS service to firewalld if present
  firewalld:
    service: dns
    permanent: yes
    state: enabled
  when: '"firewalld" in ansible_facts.packages'

- name: Add DNS UDP port to firewalld if present
  firewalld:
    port: 53/udp
    permanent: yes
    state: enabled
  when: '"firewalld" in ansible_facts.packages'

- name: Start firewalld service if present
  systemd:
    name: firewalld
    state: started
  when: '"firewalld" in ansible_facts.packages'
