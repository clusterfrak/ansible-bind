---
# =====================================
# AWS Environment Check
# =====================================
- name: Checking if runtime environment is AWS...
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: aws_uri_check
  ignore_errors: yes

- name: "AWS Response:"
  debug:
    msg:
      - "Response Code: {{ aws_uri_check.status }} --> {{ aws_uri_check.msg }}"

- name: Setting is_aws flag value...
  set_fact:
    is_aws: "{{ aws_uri_check.status == 200 }}"
  when: aws_uri_check.status == 200

- name: "{{ 'EnvironmentType: AWS' if is_aws else 'EnvironmentType: Non-AWS' }}"
  debug:
    msg:
      - "AWS Environment check returned: {{ aws_uri_check.status }}"
      - "is_aws flag set to: {{ 'True' if aws_uri_check.status == 200 else 'False'  }}"

# =====================================
# Firewalld Service Check
# =====================================
- name: Gathering list of all installed packages...
  package_facts:
    manager: auto

- name: Checking if firewalld is installed...
  set_fact:
    is_firewalld: "{{ 'firewalld' in ansible_facts.packages }}"
  when: '"firewalld" in ansible_facts.packages'

- name: "Firewalld State: {{ 'Installed' if is_firewalld else 'Not Installed' }}"
  debug:
    msg:
      - "is_firewalld flag set to: {{ 'True' if 'firewalld' in ansible_facts.packages else 'False'  }}"

# =====================================
# Bind Service Install
# -------------------------------------
# Install Bind and Dependancy Packages
# =====================================
- name: Installing Epel Yum Repository...
  yum:
    name:
      - epel-release
    state: present

- name: Installing Bind and dependancy packages...
  yum:
    name:
      - bind
      - bind-utils
      - net-tools
      - iproute
      - bind-dyndb-ldap
    state: present

# -----------------------------------------------
# Set Variables used in various Bind config tasks
# -----------------------------------------------
- name: Gathering network CIDR....
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f2
  args:
    warn: False
  register: subnet_cidr
  failed_when: "'FAILED' in subnet_cidr.stderr"
  changed_when: False

- name: "Network CIDR set to:"
  debug:
    msg: "/{{ subnet_cidr.stdout }}"

- name: Calculating PTR zone...
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f1 | awk -F"." '{print $3"."$2"."$1}'
  args:
    warn: False
  register: ptr_zone
  failed_when: "'FAILED' in ptr_zone.stderr"
  changed_when: False

- name: "PTR Zone set to:"
  debug:
    msg: "{{ ptr_zone.stdout }}"

- name: Calculating PTR nameserver Id...
  shell: |
    set -o pipefail
    ip addr | grep inet | grep {{ ansible_default_ipv4.interface }} | awk '{print $2}' | cut -d"/" -f1 | awk -F"." '{print $4}'
  args:
    warn: False
  register: ptr_id
  failed_when: "'FAILED' in ptr_id.stderr"
  changed_when: False

- name: "PTR Nameserver ID set to:"
  debug:
    msg: "{{ ptr_id.stdout }}"

# -----------------------------------------------
# Configure Bind
# -----------------------------------------------
# Back Named.conf
- name: Backing up named.conf...
  copy:
    src: /etc/named.conf
    dest: /etc/named.conf.bak

# Configure Bind
- name: Configuring /etc/named.conf...
  template: src=named.conf.j2 dest=/etc/named.conf owner=named group=named mode=0775

- name: Configuring /etc/named/named.conf.local...
  template: src=named.conf.local.j2 dest=/etc/named/named.conf.local owner=named group=named mode=0775

- name: Creating zone data storage directory...
  file: path=/etc/named/zones state=directory owner=named group=named mode=0775 recurse=yes

- name: Configuring {{ domain }} DNS zone...
  template: src=db.zone.j2 dest=/etc/named/zones/db.{{ domain }} owner=named group=named mode=0644

- name: Configuring {{ domain }} PTR zone...
  template: src=db.ptrzone.j2 dest=/etc/named/zones/db.{{ ptr_zone.stdout }} owner=named group=named mode=0644

# Start Bind Service
- name: Starting Bind Service...
  service: name=named state=started enabled=yes

# Get list of services to check Bind Service state
- name: Gathering Service States...
  service_facts:

- name: "Bind Service State:"
  debug:
    msg: "{{ ansible_facts.services['named.service'] }}"

- name: Restarting Bind Service...
  systemd: name=named state=restarted
  when: not ansible_facts.services['named.service'].state == 'running'

- name: Flushing pending Bind Handler actions...
  meta: flush_handlers # Force restart handlers to restart now instead of at end of playbook run.

# -----------------------------------------------
# Configure Local Resolution to the Bind Service
# -----------------------------------------------
- name: Reconfiguring ifcfg-{{ ansible_default_ipv4.interface }} to use local Bind service...
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DNS1='
    line: 'DNS1={{ ansible_default_ipv4.address }}'

- name: Reconfiguring ifcfg-{{ ansible_default_ipv4.interface }} to use local search domain {{ domain }}
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
    state: present
    regexp: '^DOMAIN='
    line: 'DOMAIN={{ domain }}'

- name: Verifying ifcfg-{{ ansible_default_ipv4.interface }} changes...
  command: cat /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
  register: ifcfg_details
  failed_when: "'FAILED' in ifcfg_details.stderr"
  changed_when: False

- name: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
  debug:
    msg: "{{ ifcfg_details.stdout_lines }}"

# Restart the network service if not running in AWS
- name: Checking if network service requires restart...
  command: echo "The network service requires a restart!"
  notify: Restart Networking Service
  when: not is_aws

# Remove eth0 config if its not the ansible interface.
# The playbook will fail in AWS if the eth0 config is present and the adapter is not eth0
# - name: Removing eth0 if ansible ipv4 interface is not eth0...
#   file:
#     path: /etc/sysconfig/network-scripts/ifcfg-eth0
#     state: absent
#   when: not ansible_default_ipv4.interface == 'eth0' and is_aws

# Restart Networking Service
- name: Flushing pending Network Handler actions...
  meta: flush_handlers # Force restart handlers to restart now instead of at end of playbook run.

# Get list of services to check Network Service state
- name: Re-Gathering Service States...
  service_facts:

- name: "Network Service State:"
  debug:
    msg: "{{ ansible_facts.services['network.service'] if ansible_distribution_major_version > '6' else ansible_facts.services['network'] }}"
  when: not is_aws
  ignore_errors: yes

# EL 7 Network Restart
- name: Restarting EL7 Network Service...
  systemd: name=network state=restarted
  when: not ansible_facts.services['network.service'].state == 'running' and ansible_distribution_major_version > '6' and not is_aws

# EL 6 Network Restart
- name: Restarting EL6 Network Service...
  service:
    name: network
    state: restarted
  when: not ansible_facts.services['network'].state == 'running' and ansible_distribution_major_version < '7' and not is_aws

# -------------------
# Configure SELinux
# -------------------
- name: Configuring /etc/sysconfig/named zone security context...
  lineinfile: dest=/etc/sysconfig/named state=present regexp='^ENABLE_ZONE_WRITE=' line='ENABLE_ZONE_WRITE=yes'

- name: Configuring Bind SELinux contexts...
  seboolean: name=named_write_master_zones state=yes persistent=yes
  ignore_errors: yes

# -------------------
# Configure Firewalld
# -------------------
- name: Stopping firewalld service...
  systemd:
    name: firewalld
    state: stopped
  when:
    - is_firewalld

- name: Re-Gathering Service States...
  service_facts:
  when: is_firewalld

- name: "Firewalld Service State:"
  debug:
    msg: "{{ ansible_facts.services['firewalld.service'] }}"
  when: is_firewalld

- name: Adding DNS service to firewalld...
  firewalld:
    service: dns
    permanent: yes
    state: enabled
  when: is_firewalld

- name: Adding DNS UDP port to firewalld...
  firewalld:
    port: 53/udp
    permanent: yes
    state: enabled
  when: is_firewalld

- name: Starting firewalld service...
  systemd:
    name: firewalld
    state: started
  when: is_firewalld

- name: Re-Gathering Service States...
  service_facts:
  when: is_firewalld

- name: "Firewalld Service State:"
  debug:
    msg: "{{ ansible_facts.services['firewalld.service'] }}"
  when: is_firewalld